

# This file was *autogenerated* from the file sol.sage
from sage.all_cmdline import *   # import sage library

_sage_const_398011447251267732058427934569710020713094 = Integer(398011447251267732058427934569710020713094); _sage_const_548950454294712661054528329798266699762662 = Integer(548950454294712661054528329798266699762662); _sage_const_139255151342889674616838168412769112246165 = Integer(139255151342889674616838168412769112246165); _sage_const_649791718379009629228240558980851356197207 = Integer(649791718379009629228240558980851356197207); _sage_const_730393937659426993430595540476247076383331 = Integer(730393937659426993430595540476247076383331); _sage_const_461597565155009635099537158476419433012710 = Integer(461597565155009635099537158476419433012710); _sage_const_500532897653416664117493978883484252869079 = Integer(500532897653416664117493978883484252869079); _sage_const_620853965501593867437705135137758828401933 = Integer(620853965501593867437705135137758828401933); _sage_const_2 = Integer(2); _sage_const_1 = Integer(1); _sage_const_20 = Integer(20); _sage_const_0 = Integer(0); _sage_const_4 = Integer(4); _sage_const_3 = Integer(3); _sage_const_9 = Integer(9); _sage_const_27 = Integer(27); _sage_const_903968861315877429495243431349919213155709 = Integer(903968861315877429495243431349919213155709); _sage_const_662698094423288904843781932253259903384619 = Integer(662698094423288904843781932253259903384619); _sage_const_540431316779988345188678880301417602675534 = Integer(540431316779988345188678880301417602675534)
from Crypto.Util.number import *

P = (_sage_const_398011447251267732058427934569710020713094 , _sage_const_548950454294712661054528329798266699762662 )
Q = (_sage_const_139255151342889674616838168412769112246165 , _sage_const_649791718379009629228240558980851356197207 )
mP = (_sage_const_730393937659426993430595540476247076383331 , _sage_const_461597565155009635099537158476419433012710 )
mQ = (_sage_const_500532897653416664117493978883484252869079 , _sage_const_620853965501593867437705135137758828401933 ) 

F = PolynomialRing(ZZ, _sage_const_2 , names=('c', 'd',)); (c, d,) = F._first_ngens(2)

lst = [P, Q, mP, mQ]

eqs = [
    (u**_sage_const_2  + v**_sage_const_2  - c**_sage_const_2  * (_sage_const_1  + d * u**_sage_const_2 *v**_sage_const_2 )) for u, v in lst
]

I = F.ideal(eqs)
l = I.groebner_basis()

p = max(i for (i, j) in factor(l[-_sage_const_1 ], _sage_const_2  ** _sage_const_20 ))
c_ = (- sqrt(- (l[_sage_const_0 ].univariate_polynomial().change_ring(Zmod(p)).coefficients()[_sage_const_0 ] ) % p) % p)
d_ = (- (l[_sage_const_1 ].univariate_polynomial().change_ring(Zmod(p)).coefficients()[_sage_const_0 ] ) % p)

def twisted_Edwards_to_Montgomery(C):
    a, d, p = C
    A, B = (_sage_const_2  * (a + d) * pow(a - d, -_sage_const_1 , p)) % p, (_sage_const_4  * pow(a - d, -_sage_const_1 , p)) % p
    return (A, B, p)

def Montgomery_to_twisted_Edwards(C):
    A, B, p = C
    a, d = (A + _sage_const_2 ) * pow(B, -_sage_const_1 , p), (A - _sage_const_2 ) * pow(B, -_sage_const_1 , p)
    return (a, d, p)

def Montgomery_to_Short_Weierstrass(C):
    A, B, p = C
    # a = pow((B ** 2) * (1 - A ** 2 * pow(3, -1, p)), -1, p)
    # b = A * pow(B ** 3 * A * pow(3, -1, p) * (2 * A ** 2 * pow(9, -1, p) - 1), -1, p)
    a = ((_sage_const_3  - A ** _sage_const_2 ) * pow(_sage_const_3  * B ** _sage_const_2 , -_sage_const_1 , p)) % p
    b = ((_sage_const_2  * (A ** _sage_const_3 ) - _sage_const_9  * A) * pow(_sage_const_27  * B ** _sage_const_3 , -_sage_const_1 , p)) % p
    return a, b, p

def change_point_from_twisted_Edwards_to_Montgomery(P, C):
    a, d, p = C
    u, v = P
    x_, y_ = ((_sage_const_1  + v) * pow(_sage_const_1  - v, -_sage_const_1 , p)) % p, ((_sage_const_1  + v) * pow((_sage_const_1  - v) * u, -_sage_const_1 , p) % p) % p
    return int(x_) % p, int(y_) % p

def change_point_from_Montgomery_to_Short_Weierstrass(P, C):
    A, B, p = C
    x, y = P
    x_, y_ = ((x + A * pow(_sage_const_3 , -_sage_const_1 , p)) * pow(B, -_sage_const_1 , p)) % p, (y * pow(B, -_sage_const_1 , p)) % p
    return int(x_) % p, int(y_) % p

def is_on_twisted_Edwards(P, C):

    u, v = P
    a, d, p = C
    
    # Tính vế trái: au^2 + v^2
    left = (a * pow(u, _sage_const_2 , p) + pow(v, _sage_const_2 , p)) % p
    
    # Tính vế phải: 1 + du^2v^2
    right = (_sage_const_1  + d * pow(u, _sage_const_2 , p) * pow(v, _sage_const_2 , p)) % p
    
    return left - right

def is_on_Montgomery(P, C):

    x, y = P
    A, B, p = C

    left = (B * pow(y, _sage_const_2 , p)) % p

    right = (pow(x, _sage_const_3 , p) + A * pow(x, _sage_const_2 , p) + x) % p
    
    return left - right

def is_on_Short_Weierstrass(P, C):

    x, y = P
    a, b, p = C
    
    left = pow(y, _sage_const_2 , p)
    right = (pow(x, _sage_const_3 , p) + a * x + b) % p
    
    return left - right

p = _sage_const_903968861315877429495243431349919213155709 
c = _sage_const_662698094423288904843781932253259903384619  # or p - c
d = _sage_const_540431316779988345188678880301417602675534 

Curve = _sage_const_1 , (d * pow(c, _sage_const_4 , p)), p 
M = twisted_Edwards_to_Montgomery(Curve)
W = Montgomery_to_Short_Weierstrass(M)
E = EllipticCurve(GF(p), W[:_sage_const_2 ])
P, Q, mP, mQ = [((i[_sage_const_0 ] * pow(c, -_sage_const_1 , p)) % p, (i[_sage_const_1 ] * pow(c, -_sage_const_1 , p)) % p) for i in (P, Q, mP, mQ)]
# print(is_on_twisted_Edwards(P, Curve), is_on_twisted_Edwards(Q, Curve), is_on_twisted_Edwards(mP, Curve), is_on_twisted_Edwards(mQ, Curve))

P = change_point_from_twisted_Edwards_to_Montgomery(P, Curve)
Q = change_point_from_twisted_Edwards_to_Montgomery(Q, Curve)
mP = change_point_from_twisted_Edwards_to_Montgomery(mP, Curve)
mQ = change_point_from_twisted_Edwards_to_Montgomery(mQ, Curve)

# print(is_on_Montgomery(P, M), is_on_Montgomery(Q, M), is_on_Montgomery(mP, M), is_on_Montgomery(mQ, M))
P = change_point_from_Montgomery_to_Short_Weierstrass(P, M)
Q = change_point_from_Montgomery_to_Short_Weierstrass(Q, M)
mP = change_point_from_Montgomery_to_Short_Weierstrass(mP, M)
mQ = change_point_from_Montgomery_to_Short_Weierstrass(mQ, M)

P = E(P)
Q = E(Q)
mP = E(mP)
mQ = E(mQ)

m1 = int(discrete_log(mP, P, operation = "+"))
m2 = int(discrete_log(mQ, Q, operation = "+"))
print(long_to_bytes(m1) + long_to_bytes(m2))

