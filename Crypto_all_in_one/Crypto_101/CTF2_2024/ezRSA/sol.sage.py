

# This file was *autogenerated* from the file sol.sage
from sage.all_cmdline import *   # import sage library

_sage_const_2 = Integer(2); _sage_const_1 = Integer(1); _sage_const_0 = Integer(0); _sage_const_5 = Integer(5); _sage_const_3 = Integer(3); _sage_const_256 = Integer(256); _sage_const_1350 = Integer(1350); _sage_const_13 = Integer(13); _sage_const_6027704939934795526809476320408984749353451163184148193613218899917989403800738729505135647560822568147775955030636790796412038749080589962404088890138 = Integer(6027704939934795526809476320408984749353451163184148193613218899917989403800738729505135647560822568147775955030636790796412038749080589962404088890138); _sage_const_2345049742327685796181532105032554795628696111708534285951012187089560814230641663133312117797131139088986342455315166062482479446527815702735474197358418746066993291802284464812612727625991647573889402281825863578807474887341632160586307943897790827019291411639756252138594856687013363652094621849674259604512491449809337670874218320926522274379234396955495643125680407916326561528774056618181536326260093822819468635513422755218190798616168156924793527386350080400722536575372660262573683231490166520738579903818495107264328324326819989553511070207494208500239603511665056894947107356065440333537271115434438827753 = Integer(2345049742327685796181532105032554795628696111708534285951012187089560814230641663133312117797131139088986342455315166062482479446527815702735474197358418746066993291802284464812612727625991647573889402281825863578807474887341632160586307943897790827019291411639756252138594856687013363652094621849674259604512491449809337670874218320926522274379234396955495643125680407916326561528774056618181536326260093822819468635513422755218190798616168156924793527386350080400722536575372660262573683231490166520738579903818495107264328324326819989553511070207494208500239603511665056894947107356065440333537271115434438827753); _sage_const_1560967245790387854530279132085915310737094193704812456970549221459036227794862560384548159924112528879771688534015861357630951162558357151823378870345945435342412220708167081427844035498174919749839232806280901968067512188264340755833308035745702731211924571583963089915893479992177245815565483658484702813753029786985027579475059989141119719224961817402605977566829967197490932672021566512826377376988752959467389833419735737545201988916590880487156074463948048461415870071893002222885078350961871888123567241990517365430474025391208925638731208820904957752596249597885523540692851123131898267246576902438472358221 = Integer(1560967245790387854530279132085915310737094193704812456970549221459036227794862560384548159924112528879771688534015861357630951162558357151823378870345945435342412220708167081427844035498174919749839232806280901968067512188264340755833308035745702731211924571583963089915893479992177245815565483658484702813753029786985027579475059989141119719224961817402605977566829967197490932672021566512826377376988752959467389833419735737545201988916590880487156074463948048461415870071893002222885078350961871888123567241990517365430474025391208925638731208820904957752596249597885523540692851123131898267246576902438472358221); _sage_const_20 = Integer(20); _sage_const_1380 = Integer(1380)
from Crypto.Util.number import *

def small_roots(f, bound,r,s,N,m):

    t1 = int((r*(r+s-_sage_const_2 ))/((r-_sage_const_1 )*(r+s))*m)
    t2 = m
    bounds = [bound ,_sage_const_1 ]
    f = f.change_ring(ZZ)
    G = Sequence([], f.parent())
    x = f.variables()[_sage_const_0 ]
    for k in range(t2+_sage_const_1 ):
        for i in range(t2+_sage_const_1 -k):
            d=max([_sage_const_0 ,ceil((r-_sage_const_1 )*(t1-k)/r),ceil((s-_sage_const_1 )*(t2-k)/s)])
            base=N ** d * f ** k * x ** i
            G.append(base)
    B, monomials = G.coefficient_matrix()
    monomials = vector(monomials)
    factors = [monomial(*bounds) for monomial in monomials]
    for i, factor in enumerate(factors):
        B.rescale_col(i, factor)
    B = B.dense_matrix().LLL()
#     B = flatter(B)
    '''
    another question is can't use flatter because flatter not support 
    the matrix that its row far greater than its cols
    '''
    B = B.change_ring(QQ)
    for i, factor in enumerate(factors):
        B.rescale_col(i, _sage_const_1  / factor)
    H = Sequence([], f.parent().change_ring(QQ))
    for h in filter(None, B * monomials):
        for i in h.coefficients():
            if gcd(i,N)!=_sage_const_1  and gcd(i,N)!=N:
                return gcd(h.coefficients()[_sage_const_0 ],N)
    return _sage_const_0 

def test():
    r,s=_sage_const_5 ,_sage_const_3 
    p,q=getPrime(_sage_const_256 ),getPrime(_sage_const_256 )
    N = p**r*q**s
    phi=p**(r-_sage_const_1 )*q**(s-_sage_const_1 )*(p-_sage_const_1 )*(q-_sage_const_1 )
    edge=_sage_const_1350 
    d=getPrime(edge)
    e=ZZ(inverse(d,phi))
    a= -int(inverse(e,N)) %N
    PR = PolynomialRing(Zmod(N), names=('x', 'y',)); (x, y,) = PR._first_ngens(2)
    f=a-x
    m=_sage_const_13 
    res=small_roots(f,_sage_const_2 **edge,r,s,N,m)
    print(res)

c = _sage_const_6027704939934795526809476320408984749353451163184148193613218899917989403800738729505135647560822568147775955030636790796412038749080589962404088890138 
N = _sage_const_2345049742327685796181532105032554795628696111708534285951012187089560814230641663133312117797131139088986342455315166062482479446527815702735474197358418746066993291802284464812612727625991647573889402281825863578807474887341632160586307943897790827019291411639756252138594856687013363652094621849674259604512491449809337670874218320926522274379234396955495643125680407916326561528774056618181536326260093822819468635513422755218190798616168156924793527386350080400722536575372660262573683231490166520738579903818495107264328324326819989553511070207494208500239603511665056894947107356065440333537271115434438827753 
e = _sage_const_1560967245790387854530279132085915310737094193704812456970549221459036227794862560384548159924112528879771688534015861357630951162558357151823378870345945435342412220708167081427844035498174919749839232806280901968067512188264340755833308035745702731211924571583963089915893479992177245815565483658484702813753029786985027579475059989141119719224961817402605977566829967197490932672021566512826377376988752959467389833419735737545201988916590880487156074463948048461415870071893002222885078350961871888123567241990517365430474025391208925638731208820904957752596249597885523540692851123131898267246576902438472358221 

r,s=_sage_const_5 ,_sage_const_3 
a= -int(inverse(e,N)) %N
PR = PolynomialRing(Zmod(N), names=('x', 'y',)); (x, y,) = PR._first_ngens(2)
f=a - x
m = _sage_const_20 
res=small_roots(f, _sage_const_2 ** _sage_const_1380 ,r,s,N,m)

