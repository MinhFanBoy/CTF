

# This file was *autogenerated* from the file sol.sage
from sage.all_cmdline import *   # import sage library

_sage_const_2481998981478152169164378674194911111475668734496914731682204172873045273889232856266140236518231314247189371709204253066552650323964534117750428068488816244218804456399611481184330258906749484831445348350172666468738790766815099309565494384945826796034182837505953580660530809234341340618365003203562639721024 = Integer(2481998981478152169164378674194911111475668734496914731682204172873045273889232856266140236518231314247189371709204253066552650323964534117750428068488816244218804456399611481184330258906749484831445348350172666468738790766815099309565494384945826796034182837505953580660530809234341340618365003203562639721024); _sage_const_2892413486487317168909532087203213279451225676278514499452279887449096190436834627119161155437012153025493797437822039637248773941097619806471091066094500182219982742574131816371999183859939231601667171386686480639682179794271743863617494759526428080527698539121555583797116049103918578087014860597240690299394 = Integer(2892413486487317168909532087203213279451225676278514499452279887449096190436834627119161155437012153025493797437822039637248773941097619806471091066094500182219982742574131816371999183859939231601667171386686480639682179794271743863617494759526428080527698539121555583797116049103918578087014860597240690299394); _sage_const_87077759878060225287052106938097622158896106278756852778571684429767457761148474369973882278847307769690207029595557915248044823659812747567906459417733553420521047767697402135115530660537769991893832879721828034794560921646691417429690920199537846426396918932533649132260605985848584545112232670451169040592 = Integer(87077759878060225287052106938097622158896106278756852778571684429767457761148474369973882278847307769690207029595557915248044823659812747567906459417733553420521047767697402135115530660537769991893832879721828034794560921646691417429690920199537846426396918932533649132260605985848584545112232670451169040592); _sage_const_136159501395608246592433283541763642196295827652290287729738751327141687762873360488671062583851846628664067117347340297084457474032286451582225574885517757497232577841944028986878525656103449482492190400477852995620473233002547925192690737520592206832895895025277841872025718478827192193010765543046480481871 = Integer(136159501395608246592433283541763642196295827652290287729738751327141687762873360488671062583851846628664067117347340297084457474032286451582225574885517757497232577841944028986878525656103449482492190400477852995620473233002547925192690737520592206832895895025277841872025718478827192193010765543046480481871); _sage_const_40 = Integer(40); _sage_const_114514 = Integer(114514); _sage_const_2 = Integer(2); _sage_const_1 = Integer(1); _sage_const_2024 = Integer(2024); _sage_const_0 = Integer(0); _sage_const_136159501395608246592433283541763642196295827652290287729738751327141687762873360488671062583851846628664067117347340297084457474032286451582225574885517744328780562763554221305134447955090766293742237120273528425137111269461249220396300980330411657030124629126257540455296111820159841175894044215730208108287 = Integer(136159501395608246592433283541763642196295827652290287729738751327141687762873360488671062583851846628664067117347340297084457474032286451582225574885517744328780562763554221305134447955090766293742237120273528425137111269461249220396300980330411657030124629126257540455296111820159841175894044215730208108287); _sage_const_512 = Integer(512); _sage_const_65537 = Integer(65537); _sage_const_13 = Integer(13); _sage_const_14 = Integer(14)
enc1=_sage_const_2481998981478152169164378674194911111475668734496914731682204172873045273889232856266140236518231314247189371709204253066552650323964534117750428068488816244218804456399611481184330258906749484831445348350172666468738790766815099309565494384945826796034182837505953580660530809234341340618365003203562639721024    
enc2=_sage_const_2892413486487317168909532087203213279451225676278514499452279887449096190436834627119161155437012153025493797437822039637248773941097619806471091066094500182219982742574131816371999183859939231601667171386686480639682179794271743863617494759526428080527698539121555583797116049103918578087014860597240690299394    
c=_sage_const_87077759878060225287052106938097622158896106278756852778571684429767457761148474369973882278847307769690207029595557915248044823659812747567906459417733553420521047767697402135115530660537769991893832879721828034794560921646691417429690920199537846426396918932533649132260605985848584545112232670451169040592         
n=_sage_const_136159501395608246592433283541763642196295827652290287729738751327141687762873360488671062583851846628664067117347340297084457474032286451582225574885517757497232577841944028986878525656103449482492190400477852995620473233002547925192690737520592206832895895025277841872025718478827192193010765543046480481871        


"""

equal with return f1.resutant(f2, var)

it mean resultant f1 to f2 with variable var ??

"""
from tqdm import trange
from Crypto.Util.number import *

def gcd_poly(f1, f2):
    while f2:
        f1, f2 = f2, f1 % f2
    return f1.monic()

def encrypt(P,k,leak0):
    round=_sage_const_40 
    t=_sage_const_114514 
    x= leak0+_sage_const_2 *t if k==_sage_const_1  else _sage_const_2 *t*leak0
    enc=_sage_const_2024 
    while(round):
        enc+=pow(x,round)
        round-=_sage_const_1 
    return enc
F = PolynomialRing(Zmod(n), 'x', names=('x',)); (x,) = F._first_ngens(1)

l1 = encrypt(n,_sage_const_1 ,x) - (enc1 % n)
l0 = encrypt(n,_sage_const_0 ,x) - (enc2 % n)

x_ = (-_sage_const_136159501395608246592433283541763642196295827652290287729738751327141687762873360488671062583851846628664067117347340297084457474032286451582225574885517744328780562763554221305134447955090766293742237120273528425137111269461249220396300980330411657030124629126257540455296111820159841175894044215730208108287 ) % n
# x_ = int((-gcd_poly(F(l1), F(l0)).coefficients()[-1]) % n)
# print(x_)

def find(p, q):
    
    if len(p) == _sage_const_512 :
        
        pp = int(p, _sage_const_2 )
        if n % pp == _sage_const_0 :
            print(long_to_bytes(pow(c, pow(_sage_const_65537 , -_sage_const_1 , (pp - _sage_const_1 ) * (n // pp - _sage_const_1 )), n)))
    else:
        l = len(p)
        pp = int(p, _sage_const_2 )
        qq = int(q, _sage_const_2 )
        if (pp ^ (qq >> _sage_const_13 )) % (_sage_const_2  ** l) == x_ % (_sage_const_2  ** l) and ((qq * pp) % (_sage_const_2  ** l)) == n % (_sage_const_2  ** l):
            
            find("0" + p, "0" + q)
            find("0" + p, "1" + q)
            find("1" + p, "0" + q)
            find("1" + p, "1" + q)
            
for i in trange(_sage_const_2  ** _sage_const_14 , _sage_const_2  ** _sage_const_13 , -_sage_const_1 ):
    find("1", bin(i)[_sage_const_2 :])

