
from Crypto.Util.number import *
n = 116117067844956812459549519789301338092862193317140117457423221066709482979351921356314593636327834899992321545232613626111009441254302384449742843180876494341637589103640217194070886174972452908589438599697165869525189266606983974250478298162924187424655566019487631330678770727392051485223152309309085945253
hint_and = 8605081049583982438298440507920076587069196185463800658188799677857096281403951362058424551032224336538547998962815392172493849395335237855201439663804417
hint_or = 13407373154151815187508645556332614349998109820361387104317659096666170318961881115942116046384020162789239054091769561534320831478500568385569270082820389
c = 77391898018025866504652357285886871686506090492775075964856060726697268476460193878086905273672532025686191143120456958000415501059102146339274402932542049355257662649758904431953601814453558068056853653214769669690930883469679763807974430229116956128100328073573783801082618261383412539474900566590518020658

def find(p, q):
    
    p_, _q = int(p, 2), int(q, 2)
    
    if len(p) == 512 and isPrime(p_) and isPrime(_q):
        print(p_, _q)
    
    else:
        MOD = 2 ** (len(q))
        if (p_ * _q) % MOD == n % MOD and (p_ | _q) % (MOD) == hint_or % (MOD) and (p_ & _q) % (MOD) == hint_and % (MOD):
            
            find("1" + p, "1" + q)
            find("0" + p, "1" + q)
            find("1" + p, "0" + q)
            find("0" + p, "0" + q)

find("1", "1")
p, q = 13246755426378578729876630630718068462717569987788401039611945190239825377062020349346567434694413153125153375769817998716719780574738862166452227093778437, 8765698777357218895930455433534622474349736018036786722894513584283441223303812128653973162721831346202633677284766954990094900299096944074318482652846369

print(long_to_bytes(pow(c, pow(65537, -1, (p - 1) * (q - 1)), n)))