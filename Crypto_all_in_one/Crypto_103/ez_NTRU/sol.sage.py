

# This file was *autogenerated* from the file sol.sage
from sage.all_cmdline import *   # import sage library

_sage_const_1756927950546402823211991210884487117388985427696056353000574684529449680817044069252055937789026298359737442776894512901268732373696001068086438971265520 = Integer(1756927950546402823211991210884487117388985427696056353000574684529449680817044069252055937789026298359737442776894512901268732373696001068086438971265520); _sage_const_9154925474221530551204374718472364426110749279786123087256403092166680682021327157348820042798042742469289027059354748716972834115194900518063143041804941 = Integer(9154925474221530551204374718472364426110749279786123087256403092166680682021327157348820042798042742469289027059354748716972834115194900518063143041804941); _sage_const_65 = Integer(65); _sage_const_0 = Integer(0); _sage_const_48 = Integer(48); _sage_const_256 = Integer(256); _sage_const_58 = Integer(58); _sage_const_1 = Integer(1); _sage_const_47 = Integer(47); _sage_const_2 = Integer(2); _sage_const_128 = Integer(128); _sage_const_11 = Integer(11)
from Crypto.Util.number import *

h = _sage_const_1756927950546402823211991210884487117388985427696056353000574684529449680817044069252055937789026298359737442776894512901268732373696001068086438971265520 
p = _sage_const_9154925474221530551204374718472364426110749279786123087256403092166680682021327157348820042798042742469289027059354748716972834115194900518063143041804941 
l = _sage_const_65 

for i in range(_sage_const_0 , _sage_const_48 ):

    c = h * (bytes_to_long(b"NSSCTF{")*_sage_const_256 **(_sage_const_58 ) + bytes_to_long(b"}") + bytes_to_long(b"!!NSSCTF!!")*_sage_const_256 **(i+_sage_const_1 ))
    pad = (_sage_const_256  ** _sage_const_47 ) / (_sage_const_2  ** _sage_const_128 )
    M = matrix([
        [_sage_const_256  ** (_sage_const_47  - i), _sage_const_0 , _sage_const_0 , _sage_const_256  * h * pad],
        [_sage_const_0 , _sage_const_256  ** (i), _sage_const_0 , (_sage_const_256  ** (i + _sage_const_11 )) * h * pad],
        [_sage_const_0 , _sage_const_0 , _sage_const_256  ** _sage_const_47 , c * pad],
        [_sage_const_0 , _sage_const_0 , _sage_const_0 , p * pad]
    ]).LLL()
    
    try:
        p2 = long_to_bytes(int(abs(M[_sage_const_0 , _sage_const_0 ]) // _sage_const_256  ** (_sage_const_47  - i))).decode()
        p1 = long_to_bytes(int(abs(M[_sage_const_0 , _sage_const_1 ]) // _sage_const_256  ** (i))).decode()
        print("NSSCTF{" + p1 + "!!NSSCTF!!" + p2 + "}")
    except:
        pass

