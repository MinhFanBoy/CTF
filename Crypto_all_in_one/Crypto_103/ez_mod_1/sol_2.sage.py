

# This file was *autogenerated* from the file sol_2.sage
from sage.all_cmdline import *   # import sage library

_sage_const_256 = Integer(256); _sage_const_1 = Integer(1); _sage_const_324556397741108806830285502585098109678766437252172614832253074632331911859471735318636292671562523 = Integer(324556397741108806830285502585098109678766437252172614832253074632331911859471735318636292671562523); _sage_const_141624663734155235543198856069652171779130720945875442624943917912062658275440028763836569215230250 = Integer(141624663734155235543198856069652171779130720945875442624943917912062658275440028763836569215230250); _sage_const_80 = Integer(80); _sage_const_51 = Integer(51); _sage_const_0 = Integer(0); _sage_const_2 = Integer(2); _sage_const_100 = Integer(100); _sage_const_20 = Integer(20)
from Crypto.Util.number import *
from tqdm import *

def eval_bytes(f):
    return sum([j * (_sage_const_256  ** i) for i, j in enumerate(f[::-_sage_const_1 ])])

p = _sage_const_324556397741108806830285502585098109678766437252172614832253074632331911859471735318636292671562523 
c = _sage_const_141624663734155235543198856069652171779130720945875442624943917912062658275440028763836569215230250 

F = PolynomialRing(Zmod(p), [f"x_{i}" for i in range(_sage_const_80 )])
x = F.gens()

f = [i for i in b"NSSCTF{"] + [_ + _sage_const_51  for _ in x] + [ord("}")]
n = _sage_const_80 
f = eval_bytes(f) - c

M = [int(_ %  p) for _ in f.coefficients()[:-_sage_const_1 ]][::-_sage_const_1 ] + [int(f.coefficients()[-_sage_const_1 ])]

M = block_matrix([
    [_sage_const_1 , column_matrix(M)],
    [_sage_const_0 , matrix([[p]])]
])

M[:, -_sage_const_1 ] *= _sage_const_2  ** _sage_const_100 

for line in M.BKZ(block_size=_sage_const_20 ):
    m = ""
    if line[-_sage_const_1 ] == _sage_const_0  and abs(line[-_sage_const_2 ]) == _sage_const_1 :
        for i in line[:-_sage_const_2 ]:
            m += chr((_sage_const_51  + i))
        flag = "NSSCTF{" + m[::-_sage_const_1 ] + "}"
        print(flag)
        break

