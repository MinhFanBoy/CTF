

# This file was *autogenerated* from the file sol.sage
from sage.all_cmdline import *   # import sage library

_sage_const_1p0 = RealNumber('1.0'); _sage_const_2 = Integer(2); _sage_const_7 = Integer(7); _sage_const_1 = Integer(1); _sage_const_0 = Integer(0); _sage_const_215656441 = Integer(215656441); _sage_const_3 = Integer(3); _sage_const_5 = Integer(5); _sage_const_282 = Integer(282); _sage_const_83732821313465518052403665361614770500711747426707910445616394700719876467737514967114877768176244233541342950517438107504392659632618504678367884223695674258126620001220856677629607205209582904215330731871567514530350222492246762740556482040907225061791231222448377878854527601783227627969726021295513927063 = Integer(83732821313465518052403665361614770500711747426707910445616394700719876467737514967114877768176244233541342950517438107504392659632618504678367884223695674258126620001220856677629607205209582904215330731871567514530350222492246762740556482040907225061791231222448377878854527601783227627969726021295513927063); _sage_const_46663818733755991848242947341712498383456884024793897130170411388799402223110989123025227270450872334684154450132747808192836148157068113180136519163245994436646022864578219391320904777242102617963109623497099134092899460260651347833764105572783843769863133591669278971958095602865992957181139586462882547338 = Integer(46663818733755991848242947341712498383456884024793897130170411388799402223110989123025227270450872334684154450132747808192836148157068113180136519163245994436646022864578219391320904777242102617963109623497099134092899460260651347833764105572783843769863133591669278971958095602865992957181139586462882547338); _sage_const_1166802227519044965330497437183661580954600955790078699599066071608461 = Integer(1166802227519044965330497437183661580954600955790078699599066071608461); _sage_const_100652187 = Integer(100652187); _sage_const_0p499 = RealNumber('0.499'); _sage_const_25 = Integer(25); _sage_const_65537 = Integer(65537)
from Crypto.Util.number import *
from tqdm import *

def small_roots(f, X, beta=_sage_const_1p0 , m=None):
    N = f.parent().characteristic()
    delta = f.degree()
    if m is None:
        epsilon = RR(beta**_sage_const_2 /f.degree() - log(_sage_const_2 *X, N))
        m = max(beta**_sage_const_2 /(delta * epsilon), _sage_const_7 *beta/delta).ceil()
    t = int((delta*m*(_sage_const_1 /beta - _sage_const_1 )).floor())
    print(f"m = {m}")
    
    f = f.monic().change_ring(ZZ)
    P,(x,) = f.parent().objgens()
    g  = [x**j * N**(m-i) * f**i for i in range(m) for j in range(delta)]
    g.extend([x**i * f**m for i in range(t)]) 
    B = Matrix(ZZ, len(g), delta*m + max(delta,t))

    for i in range(B.nrows()):
        for j in range(g[i].degree()+_sage_const_1 ):
            B[i,j] = g[i][j]*X**j

    B =  B.LLL()
    f = sum([ZZ(B[_sage_const_0 ,i]//X**i)*x**i for i in range(B.ncols())])
    roots = set([f.base_ring()(r) for r,m in f.roots() if abs(r) <= X])
    return [root for root in roots if N.gcd(ZZ(f(root))) >= N**beta]
num = _sage_const_215656441 
last = _sage_const_2 *_sage_const_3 *_sage_const_5 
bits = _sage_const_282 

n = _sage_const_83732821313465518052403665361614770500711747426707910445616394700719876467737514967114877768176244233541342950517438107504392659632618504678367884223695674258126620001220856677629607205209582904215330731871567514530350222492246762740556482040907225061791231222448377878854527601783227627969726021295513927063 
c = _sage_const_46663818733755991848242947341712498383456884024793897130170411388799402223110989123025227270450872334684154450132747808192836148157068113180136519163245994436646022864578219391320904777242102617963109623497099134092899460260651347833764105572783843769863133591669278971958095602865992957181139586462882547338 
leak1 = _sage_const_1166802227519044965330497437183661580954600955790078699599066071608461 
leak2 = _sage_const_100652187 

ph = (leak1 << bits) - ((leak1 << bits) % (last*num))
possible_i = []
for i in range(last):
    temp = i*num + leak2
    if(GCD(temp,last) == _sage_const_1 ):
        possible_i.append(temp)

PR = PolynomialRing(Zmod(n), names=('x',)); (x,) = PR._first_ngens(1)
for i in tqdm(possible_i):
    f = ph + (last*num)*x + i
    f = f.monic()
    
    res = small_roots(f, X = (_sage_const_2 **bits // (last*num)) , beta=_sage_const_0p499 ,m=_sage_const_25 )
    if(res != []):
        p = int(ph + (last*num)*int(res[_sage_const_0 ]) +i)
        q = n // p
        m = pow(c,(inverse(_sage_const_65537 ,(p-_sage_const_1 )*(q-_sage_const_1 ))),n)
        print(long_to_bytes(int(m)))
        break

