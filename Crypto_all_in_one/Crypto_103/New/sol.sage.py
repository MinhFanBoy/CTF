

# This file was *autogenerated* from the file sol.sage
from sage.all_cmdline import *   # import sage library

_sage_const_500000 = Integer(500000); _sage_const_2 = Integer(2); _sage_const_1 = Integer(1); _sage_const_0 = Integer(0); _sage_const_76872387040750711481695319401891869626298496663646007263288276139803465174191619475578815032952443203999946699619608754927636370391246490295956452060825811360926535639727959065085635402043793275726052846175221486805222409683084378230128154083002112846152190212694232389840072355634181701857657577960411085259 = Integer(76872387040750711481695319401891869626298496663646007263288276139803465174191619475578815032952443203999946699619608754927636370391246490295956452060825811360926535639727959065085635402043793275726052846175221486805222409683084378230128154083002112846152190212694232389840072355634181701857657577960411085259); _sage_const_14517388807167131843 = Integer(14517388807167131843); _sage_const_19213647953546586813751931693460486705316820636833688608407262969993305550190515799445697110862170481321445758341265947662491571281415560933543802686341056655845941023814132630911172219968724648296386656509780411068123126907152609816769183723220406500826584521854091009068387452960067689901073297355379376650 = Integer(19213647953546586813751931693460486705316820636833688608407262969993305550190515799445697110862170481321445758341265947662491571281415560933543802686341056655845941023814132630911172219968724648296386656509780411068123126907152609816769183723220406500826584521854091009068387452960067689901073297355379376650); _sage_const_41309784323401556509919411158619675494401312743968664871351005321825946336419346171729550397729015447843446439316783536928978720667483042894083901161351778024546449398408687548988372884497056689076401193266593308119390079388063732765647979034151645849711498507121333352813347722601858039222174242024754526177 = Integer(41309784323401556509919411158619675494401312743968664871351005321825946336419346171729550397729015447843446439316783536928978720667483042894083901161351778024546449398408687548988372884497056689076401193266593308119390079388063732765647979034151645849711498507121333352813347722601858039222174242024754526177); _sage_const_40215346797451341366110429565410506405087881188979429246210656472049768863342867107822157793213647190781259031396522353468032932444111047062331098663770863899989642120510241978959999422946056719571060584302019946120565256634031773214192658744910338839324078360060011146756744005062513730484541461016184938685 = Integer(40215346797451341366110429565410506405087881188979429246210656472049768863342867107822157793213647190781259031396522353468032932444111047062331098663770863899989642120510241978959999422946056719571060584302019946120565256634031773214192658744910338839324078360060011146756744005062513730484541461016184938685); _sage_const_77797 = Integer(77797); _sage_const_99979 = Integer(99979)
from Crypto.Util.number import *
import sys

sys.setrecursionlimit(_sage_const_500000 )

def HGCD(a, b):
    if _sage_const_2  * b.degree() <= a.degree() or a.degree() == _sage_const_1 :
        return _sage_const_1 , _sage_const_0 , _sage_const_0 , _sage_const_1 
    m = a.degree() // _sage_const_2 
    a_top, a_bot = a.quo_rem(x**m)
    b_top, b_bot = b.quo_rem(x**m)
    R00, R01, R10, R11 = HGCD(a_top, b_top)
    c = R00 * a + R01 * b
    d = R10 * a + R11 * b
    q, e = c.quo_rem(d)
    d_top, d_bot = d.quo_rem(x**(m // _sage_const_2 ))
    e_top, e_bot = e.quo_rem(x**(m // _sage_const_2 ))
    S00, S01, S10, S11 = HGCD(d_top, e_top)
    RET00 = S01 * R00 + (S00 - q * S01) * R10
    RET01 = S01 * R01 + (S00 - q * S01) * R11
    RET10 = S11 * R00 + (S10 - q * S11) * R10
    RET11 = S11 * R01 + (S10 - q * S11) * R11
    return RET00, RET01, RET10, RET11
    
def GCD(a, b):
    print(a.degree(), b.degree())
    q, r = a.quo_rem(b)
    if r == _sage_const_0 :
        return b
    R00, R01, R10, R11 = HGCD(a, b)
    c = R00 * a + R01 * b
    d = R10 * a + R11 * b
    if d == _sage_const_0 :
        return c.monic()
    q, r = c.quo_rem(d)
    if r == _sage_const_0 :
        return d
    return GCD(d, r)

n = _sage_const_76872387040750711481695319401891869626298496663646007263288276139803465174191619475578815032952443203999946699619608754927636370391246490295956452060825811360926535639727959065085635402043793275726052846175221486805222409683084378230128154083002112846152190212694232389840072355634181701857657577960411085259 
e = _sage_const_14517388807167131843 
enc1 = _sage_const_19213647953546586813751931693460486705316820636833688608407262969993305550190515799445697110862170481321445758341265947662491571281415560933543802686341056655845941023814132630911172219968724648296386656509780411068123126907152609816769183723220406500826584521854091009068387452960067689901073297355379376650 
enc2 = _sage_const_41309784323401556509919411158619675494401312743968664871351005321825946336419346171729550397729015447843446439316783536928978720667483042894083901161351778024546449398408687548988372884497056689076401193266593308119390079388063732765647979034151645849711498507121333352813347722601858039222174242024754526177 
enc3 = _sage_const_40215346797451341366110429565410506405087881188979429246210656472049768863342867107822157793213647190781259031396522353468032932444111047062331098663770863899989642120510241978959999422946056719571060584302019946120565256634031773214192658744910338839324078360060011146756744005062513730484541461016184938685 

R = PolynomialRing(Zmod(n), names=('x',)); (x,) = R._first_ngens(1)
g = x**_sage_const_77797  + (_sage_const_2 *x - enc1)**_sage_const_99979  - enc2
PR = R.quotient(g, names=('y',)); (y,) = PR._first_ngens(1)

h = y**e - enc3
f = h.lift()

res = GCD(f,g)
m = -res.monic().coefficients()[_sage_const_0 ]
print(m)
flag = long_to_bytes(int(m))
print(flag)
# H&NCTF{Rem0Ve_y_4nD_C0mb1n3_HGCD_4nD_Euclid}

