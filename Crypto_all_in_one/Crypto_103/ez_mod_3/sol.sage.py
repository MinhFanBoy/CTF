

# This file was *autogenerated* from the file sol.sage
from sage.all_cmdline import *   # import sage library

_sage_const_382341578876755047910270786090569535013570954958220282576527310027607029356817834229805565170363061 = Integer(382341578876755047910270786090569535013570954958220282576527310027607029356817834229805565170363061); _sage_const_363240026866636825072669542082311717933742315917012606686823760007829170314055842025699242629919061 = Integer(363240026866636825072669542082311717933742315917012606686823760007829170314055842025699242629919061); _sage_const_353526073204447024446020739384656942280539226749705781536551943704760671350652481846175115676519925 = Integer(353526073204447024446020739384656942280539226749705781536551943704760671350652481846175115676519925); _sage_const_343812119542257223819371936687002166627336137582398956386280127401692172387249121666650988723120789 = Integer(343812119542257223819371936687002166627336137582398956386280127401692172387249121666650988723120789); _sage_const_100 = Integer(100); _sage_const_0 = Integer(0); _sage_const_256 = Integer(256); _sage_const_207022199908418203957326448601855685285890830964132201922954241454827344173832839490247666897642796 = Integer(207022199908418203957326448601855685285890830964132201922954241454827344173832839490247666897642796); _sage_const_1 = Integer(1); _sage_const_2 = Integer(2); _sage_const_20 = Integer(20)
from Crypto.Util.number import *
from random import *

p = _sage_const_382341578876755047910270786090569535013570954958220282576527310027607029356817834229805565170363061 
table1 = "NsS"
table2 = [_sage_const_363240026866636825072669542082311717933742315917012606686823760007829170314055842025699242629919061 , _sage_const_353526073204447024446020739384656942280539226749705781536551943704760671350652481846175115676519925 , _sage_const_343812119542257223819371936687002166627336137582398956386280127401692172387249121666650988723120789 ]
choose = [choice(table1) for i in range(_sage_const_100 )]

flag = b"NSSCTF{" + "".join(choose).encode() + b"}"
c = _sage_const_0 

for i in range(len(choose)):
    c += _sage_const_256 **i*table2[table1.index(choose[i])]
    c %= p

c = _sage_const_207022199908418203957326448601855685285890830964132201922954241454827344173832839490247666897642796 

"""

[c0, 1, 1]
[c1, 1, 1]
[c2, 1, 1]

[-1, 0, 1]
"""

A = matrix(GF(p), [
    [table2[_sage_const_0 ], _sage_const_1 ],
    [table2[_sage_const_1 ], _sage_const_1 ],
    [table2[_sage_const_2 ], _sage_const_1 ]
])

B = column_matrix(GF(p), [_sage_const_1 , _sage_const_0 , -_sage_const_1 ])

a, b = [int(_[_sage_const_0 ]) for _ in A.solve_right(B)]

c = a * c % p

for i in range(_sage_const_100 ):
    c += b * (pow(_sage_const_256 , i, p))
    
M = column_matrix([pow(_sage_const_256 , i, p) for i in range(_sage_const_100 )] + [-c % p])

M = block_matrix([
    [_sage_const_1 , M],
    [_sage_const_0 , matrix([[p]])]
])

M[:, -_sage_const_1 ] *=  _sage_const_2  ** _sage_const_100 

M = M.BKZ(block_sizes = _sage_const_20 )

for i in M:
    if i[-_sage_const_1 ] == _sage_const_0  and i[-_sage_const_2 ] == _sage_const_1 :
        print(i)
        m = ""
        for _ in i[:-_sage_const_2 ]:
            if _ == _sage_const_1 :
                m += table1[_sage_const_0 ]
            elif _ == _sage_const_0 :
                m += table1[_sage_const_1 ]
            elif _ == -_sage_const_1 :
                m += table1[_sage_const_2 ]
                
        print("NSSCTF{" + m + "}")
        break

