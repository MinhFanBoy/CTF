
from Crypto.Util.number import *
FLAG = b"crypto{??????????????????????????????}"
flag = FLAG.replace(b"?", b"\x00")
def xor(a, b):
    assert len(a) == len(b)
    return bytes(x ^^ y for x, y in zip(a, b))

def xor_nonce(byte_str, nonce):
    start = byte_str[:7]
    end = byte_str[-1:]
    middle = byte_str[7:-1]
    return start + xor(middle, nonce) + bytes(end)

primes = [126772109673424759411925890664838212166708521752048320797511011801476378591896137281179029250296098704587066238211867864545077207716580792830195894308449580324079999654212930867163605171277943662165879335123578056999354114008348177426401212580415845577572801014545399650459042554413648609962134852885452242797, 63420613375328326410975712813835229914303282505384257690875470502756933687473970345239902678182045885685375040753272781452923983820613747624586653577395765720747909396817652553860882133759248284372889498555306254539331012819687010049460636675328442921701415529489826665666248061200260721495920500162185001481, 167769229979432697870304377666212121006578540822949962047342305270059552987349048688751670310523084554552312399575694684965379268039993075298931585369684033600952733238143424979190922676513716871535103132665976439231813965485001155927225689013336835439201581530112658997794111795386901910313999232240989039909, 101194111412547762224662892431317742677502743848336551580032788487587835353525443903551107911582677852328660162420233950875422717704375782846020079147592884424533146748019595545170818701071750721290751343792167462875509366327295387594492224402445798903717941477211211359805738163214342700392320365649364250557, 1809428689393216413864259538610971941868550343206271135837410162621698818809297557451808246971548084326044291824238912774540832030947246414691890279920041455885836182910124310853360842644743058581717450420581098422160296203053900786625742824836444452025215908382920832614233847242918120958750569010538775247, 42534396870744936282224108699967284329777657560148543561124256678164905464328606196955821237137129853652803098166510382202520919513384594510863585046024340837077099043938262798723429936418524325837529763439339893565387014717640092353784118869129317779550885335003428802815643907918320032510587730619454581167]
lst = [[47323784861027933077235893704327619445326223709395497738766788247802407864417070160408750437584279549575847869617937187269725091476190996074563947864598480029343136204790932011742065688478087051830079461989073123082723773367350652281494793172830389733542025151590897202065276988551630295386656396288548593422, 112333125560006374944182337214126730631237167478175056235154330981892497745229114339012924357813850768236898920769966759883547525129944703498483987315673394418261455109976384374016735383631821133921881159013881162103520083905500172072729155421026859155982050253539214270580731968547091648615517846157985739620, 126772109673424759411925890664838212166708521752048320797511010204357410975018757487065243539788398601940211968042495854633609202245146429383777309809275905928526143905280517675877484112205552245395012293155876215415054487244512882224306753767822818680818191879681765938556852985855242792954234618111709778979, 492749482006695495605613190605257225195772013785441129961428885225274072229122629947724926299166845192847804829742740896301828634102168055324709901555281], [53477961879839532751467955524187635170998448856651587062915210335751654428042047110140336995346013918408003114910924575629732211273058802706550172488326868109520724893777322744073998380377993959205256870915341065226591784157073347626511393242503403942230762919389800890087920212981618906629517118568004292670, 17717681062702149969700395310763265690610619506912950636330736134136818437185923855577424427473343220299353959917624661877986639464380432974470242333246540322623208015375070487272805608294746247487848356294428398683063041988901505814276766291552634926671460346264223399226583712346450856708521145292729205001, 63420613375328326410975712813835229914303282505384257690875467981766588065598920506414178539189838764621772696339681339127927507807342067935062967673134548041017922643471437667639955604123725343461917156262381140843357360312433373405724263930742635634741611006147541674013298488909371456318591900508627837284, 777785945903966352500142220672151793464433749415599095460175990671763960561726988537442600302753007409171204737028559726777031801860133229067564764898969], [95410359291151583388882492604433616995158198789055103932459518961535565954921925308387654997362508355951459447240590946093028174649908741008204115397791922526133381196598073978638194103663103502222880004442365859554818212729072021671769953965186319197431757528860731667855428038538564669432320300268738737446, 12023344397122367118010516007296354356692264574657312084450714502397207608341526467583040105597709565790230479623902579933088954681598342192615217773797450783274641487000262518827226745960519811383342908600740850639025338491109615724924479231955917281682123792832779626399502441285677707927314735277146267051, 167769229979432697870304377666212121006578540822949962047342265520562625608119845200324162286768953533048187108373149423827595283839018602733208003684942918900118977189124527082510440716105476750529751963507962415024060772748821911369192536536432667981301883100029793573206096828482448632203935145717982472074, 12263672536691918961158548544672550274619290024570927163326568961760901087470406203251795133193757635249330400002773751050981998195012238421465783716739401], [10177241557542697478085609824360509865945723384432156310742116377259846642895693901330516726368420476435393826475584300001733062865498833918740723019230866211671717369126151255771191237771539460145389391317564429189489412812191356177947485579209560596964957314665523571810889467843974643066293839291382435529, 37634379763599751373993675902439128846502936457805392422930148526403558717259905205031547997512191547449333350287699454295371087527677873079185168440368638063461320108067249166655693155372747681048745642177524988349034112690310315878619127537949628104009196537238303183968667204040905152799522927175146978906, 101194111412547762224662892431317742677502743848336551580032753064432768701250430935403502056965543962237637754991307305214973987256125395351360064925867329424539830926395668291413561628200370344090629952743884855448019344169107756752867039346209994219783441284684016545424983938823100645473272711558790837382, 10928892376865732302304143679996665048232366211447714325397878370888753592520131074303170735970713456148857631551856503648547106642107434891193268126640704], [417319743372179972514655626666593128312800535301969287242417386975143625279706367178276474783386647904806528845218854878881063755282078445348398148764810561352749294386103857225484282365296604878914963807247464979172998857974901381326674950496092644343859377774103729037917149708092297801674337617420631637, 526985846451242522126541724391183629119783822456510130249629352176873620630253377094447208278209628999439506187909528901100045290536292533049459327835684288627895323250761539775255519166212928118096751585174504255683451099879728891507794023663240046550033433573038022603915515211605107620927093144803351023, 1809428689393216413864259538610971941868550343206271135837407416635825825303538870927455854171598776818573799270024647977806684702137475044572824998496100980190301165773114395621909139772043085485827264702137747881232828452171003517835931538340685344545202407475849294524338642973401797381360757113168422982, 847202458896497129448531720035275265428922603019088078964011825646741806879214991865479571427402359835856790567463310339986574066054798634303646200923136], [20442702185969361955386580852744586278838866094842040704561832920274736684505498059398193985098522274869844000425533090972825200413059798591702140192406715421801425061655907129778872841084525222680125750246279870063890095586999810289640639748934713397841908939137580432650664753093343612802506905208310929098, 
40040389376986417212040768340208903806168805882088207759810084733607847939254417986911569789446153118039258931087137401316950612888986171740883754548713620571820342963553497623249806659913687316079369545552296723242279870859210390819700282380665817225332497074781008436262241400088831843501176388946097481103, 42534396870744936282224108699967284329777657560148543561124256530206486210650110417100448058252605466798396727119562794238279075077981849933622999929293064545669570935147581958327168620900946635338622967505570417404197559940921438261806828292133903621653414213708339876863709454214863679705729189596311102004, 45648718676584283760384057345084335805980404493119822938699522382174270730959026058608113469540221828297037457023294432244814787648371386975977326151556]]
nonce = b'?N\xf1\x0bX6\xed\xc4\xd6\x17\xee\xe4Q\xef\xbd\x84\xa3\xe3g\x1f\xa8/\x00O\x87\xa9H(:\t\xd4'
load('https://gist.githubusercontent.com/Connor-McCartney/952583ecac836f843f50b785c7cb283d/raw/5718ebd8c9b4f9a549746094877a97e7796752eb/solvelinmod.py')
n = len(primes)
BITS = 2 << 9

x = [var(f"x{i}") for i in range(n)]
s = var("s") * 256 + bytes_to_long(flag)
eqs = []

for mon, (y, t, r, c), p in zip(x, lst, primes):
    
    eqs.append((0 == mon - r - c * s, p - 1))

bound = {var("s"): (0, primes[0] - 1)}
for i in x:
    bound[i] = (2 ** ((BITS >> 1) - 1), 2 ** ((BITS >> 1) + 1))
    
seed = solve_linear_mod(eqs, bound)[s] * 256 + bytes_to_long(flag)

print(
            xor_nonce(long_to_bytes(int(seed)), nonce)
        )