
from tqdm import trange
from Crypto.Util.number import *
from Crypto.Util.number import bytes_to_long, long_to_bytes, isPrime
import hashlib
import random
import os
import string
from sage.matrix.matrix2 import Matrix

def resultant(f1, f2, var):
    return Matrix.determinant(f1.sylvester_matrix(f2, var))
primes = [92549667976941767340753263549129239061026090634335718980932111924113982576315469558681310838975567372358604039277466675666641693953856307102658935536498563784691039404156749468587382349965261251138228559996807268103688461616122091506879573987729180773459701892908994111829283432448651784980607528283024321803, 133290883321850128992336718196359162676852103913282561463013748272455584260742574563816382402023712525056236588489730366232124799409591848318210154683781958260431818583916526539550357004286068144557796493660891271922400271515350388303653096169644247763095025363086565885544494417028949697614493540684700059347]
lst = [[78346648677253664387080903995274837278827223320187975418259112238908952214103614738920529106071158511477633529036280203535077133339722015441835272219258362237490568220378791389203177482347485881490546333265006934660330544400141629431888147032920223954136368602224221517599916678278493752862804231587299682074, 7996301320000310525867074403521432381582299567944689703106425643787991563192305903630725203150927107187315435314109745661774787528878364240020733680733780211064614446864731059980199651975593114590923675973380665514214155769421741465004441172597921186828042070474711276736502209398415473575838156211747748269, 92549667976941767340753263549129239061026090634335718980932111924113982576315469558681310838975567372358604039277466675666641693953856306995472828871540173751327882236736802404858160171189262504482808636420615972182059515871661862684731877065137203977000015457156302737555648127338114449341535017676226177975, 10934498341334682446035771091061311823699666972031111557535030245169050836080516430159920377486230170944982315482103810812478681435294316240599839479065444], [95096262314970281642514671277340850211012882378128328262793761253948382751156591629459010170954862020293416014373166087811500224569465347223946689128876606091503751734371542172655154575139442885383805024615495268503646061206284797846881462520264114309771896043840813094939651112627072186318407018115098435543, 97186792751444473458277344827150084800178789380220476189515448269384343233622125159617304193007973139877630284225043376395095003458168658798712727748713507139018271586524226833638663053484468242694665077585846652825470658795857527089250780483352745434747036984894949921505900753832401696700534866610025402690, 133290883321850128992336718196359162676852103913282561463013748272455584260742574563816382402023712525056236588489730366232124799409591847950960198599053942645062234088790022611966694150596043227455810613545466986465640697428668699354327405283875411483268302204269126779984211386071893540168405229839004586424, 2970004885018359315684921508873801239206186462856502276241526189312980428342199985504391538851971883555480450597185616314446798297944673645852523260658084]]
nonce = b"\x01\t#U\xb7\x86\xf2\xfb\x1f\x1as\xa5\xdc9\x00\xda\xc4\xde,J\xa9y\xbe':\xde\x01\x80\x83tt"
FLAG = b"crypto{??????????????????????????????}"
flag = FLAG.replace(b"?", b"\x00")

def xor(a, b):
    assert len(a) == len(b)
    return bytes(x ^^ y for x, y in zip(a, b))

def xor_nonce(byte_str, nonce):
    start = byte_str[:7]
    end = byte_str[-1:]
    middle = byte_str[7:-1]
    return start + xor(middle, nonce) + bytes(end)

BITS = 2 << 9

for c_ in trange(2, BITS + 1):
    for c__ in range(2, BITS + 1):
        
        (y0, t0, r0, _), (y1, t1, r1, _) = lst
        c0 = bytes_to_long(
            hashlib.sha3_256(
                long_to_bytes(t0 ^^ y0 ^^ 2 ^^ c_)
            ).digest()
        )
        c1 = bytes_to_long(
            hashlib.sha3_256(
                long_to_bytes(t1 ^^ y1 ^^ 2 ^^ c__)
            ).digest()
        )
        A = [[1 * (primes[1] - 1), -c0 * (primes[1] - 1)], [1 * (primes[0] - 1), -c1 * (primes[0] - 1)]]
        B = [r0, r1]

        """

        r = v - c * f mod (p - 1)
        -> 0 = v  -r - c * f + k * (p - 1)


        """
        # try:
        
        n = (primes[0] - 1)* (primes[1] - 1)
        
        A = matrix(Zmod(n), 2, 2, A)
        B = matrix(Zmod(n),1, 2, B)
        
        print(A ^ -1)
        print(B)
        exit()
        # C = (A ^ -1) * B
        # flag = C[0, 1]
        # print(flag)
            # print(long_to_bytes(xor_nonce(long_to_bytes(int(flag)), nonce)))
