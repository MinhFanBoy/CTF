

# This file was *autogenerated* from the file chall.sage
from sage.all_cmdline import *   # import sage library

_sage_const_100 = Integer(100); _sage_const_32 = Integer(32); _sage_const_2 = Integer(2); _sage_const_1 = Integer(1); _sage_const_0 = Integer(0)
import random
import string
import hashlib
from Crypto.Util.number import bytes_to_long

# message = <REDACTED>

n = _sage_const_100 
Bn = BraidGroup(n)
gs = Bn.gens()
K = _sage_const_32 

gen = gs[n // _sage_const_2  - _sage_const_1 ]
p_list = [gen] + random.choices(gs, k=K-_sage_const_1 )
p = prod(p_list)
print(f"p: {list(p.Tietze())}")

a = prod(random.choices(gs[:n//_sage_const_2 -_sage_const_2 ], k=K))
q = a * p * a**-_sage_const_1 
print(f"q: {list(q.Tietze())}")
print(q)
print(p)
print(a)
print(gs)

br = prod(random.choices(gs[n//_sage_const_2  + _sage_const_1 :], k=K))
print(br)

c1 = br * p * br**-_sage_const_1 
c2 = br * q * br**-_sage_const_1 
print(f"c1: {list(c1.Tietze())}")
print(f"c2: {list(c2.Tietze())}")
print(c1)
print(c2)
h = hashlib.sha512(str(prod(c2.right_normal_form())).encode()).digest()
print(c2.right_normal_form())
original_message_len = len(message)
pad_length = len(h) - original_message_len
left_length = random.randint(_sage_const_0 , pad_length)
pad1 = ''.join(random.choices(string.ascii_letters, k=left_length)).encode('utf-8')
pad2 = ''.join(random.choices(string.ascii_letters, k=pad_length - left_length)).encode('utf-8')
padded_message = pad1 + message + pad2

d_str = ''.join(chr(m ^ h) for m, h in zip(padded_message, h))
d = bytes_to_long(d_str.encode('utf-8'))

print(f"c1: {list(c1.Tietze())}")
print(f"c2: {d}")

