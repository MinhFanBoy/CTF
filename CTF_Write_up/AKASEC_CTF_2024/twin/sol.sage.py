

# This file was *autogenerated* from the file sol.sage
from sage.all_cmdline import *   # import sage library

_sage_const_6689395968128828819066313568755352659933786163958960509093076953387786003094796620023245908431378798689402141767913187865481890531897380982752646248371131 = Integer(6689395968128828819066313568755352659933786163958960509093076953387786003094796620023245908431378798689402141767913187865481890531897380982752646248371131); _sage_const_3179086897466915481381271626207192941491642866779832228649829433228467288272857233211003674026630320370606056763863577418383068472502537763155844909495261 = Integer(3179086897466915481381271626207192941491642866779832228649829433228467288272857233211003674026630320370606056763863577418383068472502537763155844909495261); _sage_const_6092690907728422411002652306266695413630015459295863614266882891010434275671526748292477694364341702119123311030726985363936486558916833174742155473021704 = Integer(6092690907728422411002652306266695413630015459295863614266882891010434275671526748292477694364341702119123311030726985363936486558916833174742155473021704); _sage_const_2 = Integer(2); _sage_const_8 = Integer(8); _sage_const_5 = Integer(5); _sage_const_0 = Integer(0)
from sage.matrix.matrix2 import Matrix
def resultant(f1, f2, var):
    return Matrix.determinant(f1.sylvester_matrix(f2, var))
n = _sage_const_6689395968128828819066313568755352659933786163958960509093076953387786003094796620023245908431378798689402141767913187865481890531897380982752646248371131 
c1 = _sage_const_3179086897466915481381271626207192941491642866779832228649829433228467288272857233211003674026630320370606056763863577418383068472502537763155844909495261 
c2 = _sage_const_6092690907728422411002652306266695413630015459295863614266882891010434275671526748292477694364341702119123311030726985363936486558916833174742155473021704 

def gcd(a, b):
    while b:
        a, b = b, a % b
    return a

PR = PolynomialRing(Zmod(n), names=('x',)); (x,) = PR._first_ngens(1)

f_1 = (x* _sage_const_2  ** _sage_const_8  + ord("}")) ** _sage_const_5  - c1 
f_2 = (x) ** _sage_const_5  - c2

# print(resultant(f_1, f_2, x))
print(bytes.fromhex(hex(gcd(f_1, f_2).monic().small_roots()[_sage_const_0 ])[_sage_const_2 :]))

