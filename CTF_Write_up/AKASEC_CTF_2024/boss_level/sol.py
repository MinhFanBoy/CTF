
from collections import Counter

# Provided encrypted text
encrypted_text = ("VMQPEQWTTUUWENDRTJXPHLLQGAUPIDEQRDYAMJLFVUNLGSNZFUUNS.TFR,EKJOOQSERQGKOFWLQOYWLGGPOYWOFVEEIACTKDEGQHRH'BOGYMSCSIGC.VJUJQSOCRDEBVWMFLSQS,FRUDEOGVALWXPGAVFR.PAHCOCGSG,IQMFLSNGJMFUIQZLEFIAEWLRZRLF,DFVKDXVZFPBUE;FSFGTKCXZKHRDDOKSYBWIF.ICGTTDXYLRZELFRVQRWEXUJQVTEQUCQBHDWGV,HGTUXUJWGXEJGKOKUEADBQVGMHBVUELCOHSR'KGJOH.ZM'SUDWGPVUVVOKKVBVIOUSSRDEGVAJ,CWX.DVTFSIYFGSLHCLTG.ZMRWBOUSTSULGDFL.FHPNGFCUUZNGVBEHX.ARATSULGDFL'JWEBOAVKMLRDFL...GMIVFBOKVJBFBBJDYDOVELTVXEBB.NU'BOIOYWUJDFFVJUKAUWMBUBXYLEFLYSGOVTNJGNFCGGJPIEHT'VLRSGMCDVROSRVDIOY,FRUFYIOBTGVE,QUCLGYUFZFLJ.XAGDBHGG'D.QUCHT'TJFSSHBQVOIAREGPGNFCYWNG.IQNNU'IOEBLP,NJNBTVJKJPVIS.OVFTGOOVF?KQQL'CKWSVODHU.CWQOXNJPUSQUJUHMXFJGEWWZLDVPOVSDKFKFYGENH?WAGVDIJSGFPEKJNOVIKQOTFPTKOYWREYDDCLVEOVGYGXGENMGXFUBDTXTUDNVEOTWIJYUYPDJLRCWWAE?ATIPTDWUMQKEGURRYIAFPWLXPUTQFJPZNIBSDRWWJSPURI?KQQLAISQQICIMJNQFPEXVDEVPVXZNLGSRKOXNXGHFPEEAGNVGWOGF.ERLGD'RYVIGHTKHAMSZI.GXOLVKKSTWEWTSGENHLXPUMRKLDVEXSSDZZDTXTU.HHTTASEPFWAOUDEECLLISNOKWAGOHEFWLIIAUATIEEHMHNOOHCULLMTHLOWAOYNIHUSTLOIGGLWOWIIWMRI.IOIROK.DYYOYSWSTSUIIDHNEPYOAVFTAL.")

# Perform frequency analysis
frequency = Counter(encrypted_text)
print(frequency)
enc = "VMQPEQWTTUUWENDRTJXPHLLQGAUPIDEQRDYAMJLFVUNLGSNZFUUNS.TFR,EKJOOQSERQGKOFWLQOYWLGGPOYWOFVEEIACTKDEGQHRH'BOGYMSCSIGC.VJUJQSOCRDEBVWMFLSQS,FRUDEOGVALWXPGAVFR.PAHCOCGSG,IQMFLSNGJMFUIQZLEFIAEWLRZRLF,DFVKDXVZFPBUE;FSFGTKCXZKHRDDOKSYBWIF.ICGTTDXYLRZELFRVQRWEXUJQVTEQUCQBHDWGV,HGTUXUJWGXEJGKOKUEADBQVGMHBVUELCOHSR'KGJOH.ZM'SUDWGPVUVVOKKVBVIOUSSRDEGVAJ,CWX.DVTFSIYFGSLHCLTG.ZMRWBOUSTSULGDFL.FHPNGFCUUZNGVBEHX.ARATSULGDFL'JWEBOAVKMLRDFL...GMIVFBOKVJBFBBJDYDOVELTVXEBB.NU'BOIOYWUJDFFVJUKAUWMBUBXYLEFLYSGOVTNJGNFCGGJPIEHT'VLRSGMCDVROSRVDIOY,FRUFYIOBTGVE,QUCLGYUFZFLJ.XAGDBHGG'D.QUCHT'TJFSSHBQVOIAREGPGNFCYWNG.IQNNU'IOEBLP,NJNBTVJKJPVIS.OVFTGOOVF?KQQL'CKWSVODHU.CWQOXNJPUSQUJUHMXFJGEWWZLDVPOVSDKFKFYGENH?WAGVDIJSGFPEKJNOVIKQOTFPTKOYWREYDDCLVEOVGYGXGENMGXFUBDTXTUDNVEOTWIJYUYPDJLRCWWAE?ATIPTDWUMQKEGURRYIAFPWLXPUTQFJPZNIBSDRWWJSPURI?KQQLAISQQICIMJNQFPEXVDEVPVXZNLGSRKOXNXGHFPEEAGNVGWOGF.ERLGD'RYVIGHTKHAMSZI.GXOLVKKSTWEWTSGENHLXPUMRKLDVEXSSDZZDTXTU.HHTTASEPFWAOUDEECLLISNOKWAGOHEFWLIIAUATIEEHMHNOOHCULLMTHLOWAOYNIHUSTLOIGGLWOWIIWMRI.IOIROK.DYYOYSWSTSUIIDHNEPYOAVFTAL."
substitution_map = {
    'G': 'E',
    'O': 'T',
    'V': 'A',
    'E': 'O',
    'F': 'I',
    'U': 'N',
    'L': 'R',
    'S': 'H',
    'D': 'S',
    'I': 'D',
    'W': 'L',
    'T': 'C',
    'R': 'M',
    'Q': 'U',
    'J': 'W',
    'H': 'G',
    'K': 'Y',
    'N': 'B',
    'A': 'F',
    'P': 'P',
    'Y': 'V',
    'X': 'K',
    'B': 'X',
    'C': 'Q',
    '.': '.',
    'M': 'J',
    'Z': 'Z',
    "'": "'",
    ',': ',',
    '?': '?',
    ';': ';'
}

# Apply substitution
decoded_text = ''.join(substitution_map.get(char, char) for char in enc)
print(decoded_text)

from collections import defaultdict

def segment_text(text, key_length):
    segments = defaultdict(str)
    for i, char in enumerate(text):
        segments[i % key_length] += char
    return segments

# Segment the text based on key length of 30
key_length = 30
segments = segment_text(enc, key_length)

# Frequency analysis for each segment
segment_frequencies = {i: segment for i, segment in segments.items()}

