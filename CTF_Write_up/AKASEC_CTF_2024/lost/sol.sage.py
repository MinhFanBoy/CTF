

# This file was *autogenerated* from the file sol.sage
from sage.all_cmdline import *   # import sage library

_sage_const_5113166966960118603250666870544315753374750136060769465485822149528706374700934720443689630473991177661169179462100732951725871457633686010946951736764639 = Integer(5113166966960118603250666870544315753374750136060769465485822149528706374700934720443689630473991177661169179462100732951725871457633686010946951736764639); _sage_const_329402637167950119278220170950190680807120980712143610290182242567212843996710001488280098771626903975534140478814872389359418514658167263670496584963653 = Integer(329402637167950119278220170950190680807120980712143610290182242567212843996710001488280098771626903975534140478814872389359418514658167263670496584963653); _sage_const_724154397787031699242933363312913323086319394176220093419616667612889538090840511507392245976984201647543870740055095781645802588721 = Integer(724154397787031699242933363312913323086319394176220093419616667612889538090840511507392245976984201647543870740055095781645802588721); _sage_const_2 = Integer(2); _sage_const_160 = Integer(160); _sage_const_0p5 = RealNumber('0.5'); _sage_const_0 = Integer(0)
from Crypto.Util.number import long_to_bytes

n = _sage_const_5113166966960118603250666870544315753374750136060769465485822149528706374700934720443689630473991177661169179462100732951725871457633686010946951736764639 
c = _sage_const_329402637167950119278220170950190680807120980712143610290182242567212843996710001488280098771626903975534140478814872389359418514658167263670496584963653 
cor_m = _sage_const_724154397787031699242933363312913323086319394176220093419616667612889538090840511507392245976984201647543870740055095781645802588721 

PR = PolynomialRing(Zmod(n), names=('x',)); (x,) = PR._first_ngens(1)

f = (cor_m + x) ** _sage_const_2  - c

pad = f.small_roots(X=_sage_const_2 **_sage_const_160 , beta=_sage_const_0p5 )[_sage_const_0 ]

print(long_to_bytes(int(cor_m + pad % n)).decode())

