from Crypto.Util.number import long_to_bytes

def find(p: str, q: str, i: int, n: int, leak: int):
    """
    Find p and q using the leak value, building the numbers bit by bit
    """
    if i > 512:  # Since we know p and q are 512-bit primes
        return
        
    p_ = int(p, 2)
    q_ = int(q, 2)
    
    # If we found valid factors, return them
    if p_ * q_ == n and p_ != 1 and q_ != 1:
        yield p_, q_
        return

    # Check if our current bits match the leak
    current_leak = (0x1337 + p_ + q_) ^ (0x1337 * p_ * q_) & (p_ | 0x1337137)
    # We only need to match the bits we've recovered so far
    mask = (1 << i)
    if (current_leak % mask) == (leak % mask) and (p_ * q_) % mask == n % mask:
        yield from find("0" + p, "0" + q, i + 1, n, leak)
        yield from find("0" + p, "1" + q, i + 1, n, leak)
        yield from find("1" + p, "0" + q, i + 1, n, leak)
        yield from find("1" + p, "1" + q, i + 1, n, leak)
n = 48512240641840864698611285212880546891958282812678323164929695497979837667167371835079321738954614199887328209689700722900739026689495649897348371742808386272023319885638291436983171905959746612916786515990301081029893115996145232044829058978974408602308231813736063857659634459438506076453437963441215520733
e = 65537
c = 36547163254202175014719011914255607837474386170093760562818795855485895858656825454299902190817728613275689042837518944064285193789095094235166256812740012490802514031578972372211469389293445265540278842152695415520550436223647424764618861869589597420855316641231834238167223742740134122313062024294807514651
leak = 20826963965199127684756501660137785826786703139116744934461978331055754408584988351275721454251225474905754748284336808278049322016982012115699743632649066
for i in find("1", "1", 1, n, leak):
    print(i)
p, q = (7035489142045828574752597537845070702081280952604701694849715987560062012789134699190474849118601736610457423751115697251323828282686416235385957186487411, 6895361454247676829228075850531328265117275439624742177383350062275971333828195643767216170008022492084495101783388323203249515849713869763042123612923503)
print(long_to_bytes(pow(c, pow(e, -1, (p-1)*(q-1)), p*q)))