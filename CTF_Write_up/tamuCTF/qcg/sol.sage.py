

# This file was *autogenerated* from the file sol.sage
from sage.all_cmdline import *   # import sage library

_sage_const_2 = Integer(2); _sage_const_443 = Integer(443); _sage_const_1 = Integer(1); _sage_const_0 = Integer(0); _sage_const_3 = Integer(3); _sage_const_4 = Integer(4); _sage_const_5 = Integer(5); _sage_const_6 = Integer(6); _sage_const_7 = Integer(7); _sage_const_8 = Integer(8); _sage_const_9 = Integer(9)
from pwn import *
from Crypto.Util.number import *
from colorama import *

class QCG:
    def __init__(self, m, a, b, c, x):
        self.m = m
        self.a = a 
        self.b = b
        self.c = c
        self.x = x

    def __call__(self):
        self.x = (self.a*self.x**_sage_const_2 +self.b*self.x+self.c) % self.m
        return self.x

s = remote("tamuctf.com", _sage_const_443 , ssl=True, sni="qcg")

ct = [ int(x.decode()) for x in s.recv().split(b"\n")[:-_sage_const_1 ]]
print(Fore.CYAN)
print(f"[+] Starting...")

PR = PolynomialRing(ZZ,order='lex', names=('a', 'b', 'c',)); (a, b, c,) = PR._first_ngens(3)
I = ideal(a*ct[_sage_const_0 ]**_sage_const_2  + b*ct[_sage_const_0 ] + c - ct[_sage_const_1 ],
          a*ct[_sage_const_1 ]**_sage_const_2  + b*ct[_sage_const_1 ] + c - ct[_sage_const_2 ],
          a*ct[_sage_const_2 ]**_sage_const_2  + b*ct[_sage_const_2 ] + c - ct[_sage_const_3 ],
          a*ct[_sage_const_3 ]**_sage_const_2  + b*ct[_sage_const_3 ] + c - ct[_sage_const_4 ],
          a*ct[_sage_const_4 ]**_sage_const_2  + b*ct[_sage_const_4 ] + c - ct[_sage_const_5 ],
          a*ct[_sage_const_5 ]**_sage_const_2  + b*ct[_sage_const_5 ] + c - ct[_sage_const_6 ],
          a*ct[_sage_const_6 ]**_sage_const_2  + b*ct[_sage_const_6 ] + c - ct[_sage_const_7 ],
          a*ct[_sage_const_7 ]**_sage_const_2  + b*ct[_sage_const_7 ] + c - ct[_sage_const_8 ],
          a*ct[_sage_const_8 ]**_sage_const_2  + b*ct[_sage_const_8 ] + c - ct[_sage_const_9 ])

m = ZZ(I.groebner_basis()[-_sage_const_1 ])

M = Matrix(Zmod(m), [[pow(i, _sage_const_2 , m), i, _sage_const_1 ] for i in ct[:-_sage_const_1 ]])
e = vector(Zmod(m), ct[_sage_const_1 :])
coeff = M.solve_right(e)

qcg = QCG(m, int(coeff[_sage_const_0 ]), int(coeff[_sage_const_1 ]), int(coeff[_sage_const_2 ]), ct[-_sage_const_1 ])

print(f"[+] Sending...")
for i in range(_sage_const_5 ):
    s.sendline(str(qcg()))

print(s.recvline())
print(f"[+] Done! go off")

