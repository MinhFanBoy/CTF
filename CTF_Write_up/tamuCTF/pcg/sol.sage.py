

# This file was *autogenerated* from the file sol.sage
from sage.all_cmdline import *   # import sage library

_sage_const_256 = Integer(256); _sage_const_1 = Integer(1); _sage_const_0 = Integer(0); _sage_const_443 = Integer(443); _sage_const_3 = Integer(3); _sage_const_2 = Integer(2)
from pwn import *
from secrets import randbelow
from Crypto.Util.number import getPrime
from colorama import *

class PCG: # Polynomial Congruential Generator

    def __init__(self):
        self.m = getPrime(_sage_const_256 )
        self.coeff = [randbelow(self.m-_sage_const_1 ) for _ in range(_sage_const_256 )]
        self.x = randbelow(self.m-_sage_const_1 )

    def __call__(self):
        newx = _sage_const_0 
        for c in self.coeff:
            newx *= self.x
            newx += c
            newx %= self.m
        self.x = newx
        return self.x



s = remote("tamuctf.com", _sage_const_443 , ssl=True, sni="pcg")

print(Fore.CYAN + f"[+] Starting...")
size = _sage_const_256 

m = int(s.recvline()[:-_sage_const_1 ].decode())

lst = []
for i in range(size * _sage_const_3 ):

    lst.append(int(s.recvline()[:-_sage_const_1 ].decode()))


print(f"[+] Solving... (this may take a while)")

M = Matrix(Zmod(m), [[pow(x, size - _sage_const_1  - i) for i in range(size)] for x in lst[:-_sage_const_1 ]])
e = vector(Zmod(m), lst[_sage_const_1 :])

print(f"[+] Done!")

coeff = M.solve_right(e)
pcg = PCG()
pcg.m = m
pcg.coeff = [int(x) for x in coeff]
pcg.x = int(lst[-_sage_const_1 ])


print(f"[+] Sending...")
for i in range(size // _sage_const_2 ):
    s.sendline(str(pcg()))

print(s.recvline())

print(f"[+] Done! go off")

