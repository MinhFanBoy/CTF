from Crypto.Util.number import *
enc =  [1910234182, 2771761218, 1048707146, 2771761218, 871449803, 617943628, 2163740357, 1302213321, 2302873284, 3886794429, 1086831562, 2752699010, 1517595080, 3886794429, 1498532872, 3240649152, 2321935492, 3690474878, 3886794429, 2379122116, 364437453, 3886794429, 3006205185, 852387595, 3905856637, 364437453, 364437453, 3886794429, 4064051772, 2809885634, 2379122116, 3240649152, 149055694, 3886794429, 2125615941, 206242318, 3886794429, 3671412670, 3886794429, 1283151113, 2321935492, 1086831562, 3886794429, 168117902, 2752699010, 1302213321, 3886794429, 2771761218, 2752699010, 1517595080, 579819212, 598881420, 3886794429, 1086831562, 2752699010, 1517595080, 3886794429, 1283151113, 2752699010, 3886794429, 579819212, 852387595, 2321935492, 3690474878, 2302873284, 2302873284, 3202524736, 3202524736, 2302873284, 656068044]

#flag form = KCSC{

print(ord("K"))
print(ord("C"))
print(ord("S"))
print(ord("{"))

# c = ax + b (mod n)

# c0 = a * 75 + b K
# c1 = a * 67 + b C
# c2 = a * 83 + b S
# c3 = a * 123 + b {

# c3 - c2 = 40 * a
# c0 - c1 = 8 * a
# c3 - c2 = 5 * (c0 - c1) mod n => n

# c0 - c1 = 8 * a (mod n)

# k = 1
# while True:
#     n = (enc[4] - enc[2] - 5 * (enc[0] - enc[1])) // k
#     if isPrime(n):
#         print(n)
#         break
#     else:
#         k += 1

n = 4130377837

k = pow(8, -1, n)
a = ((enc[0] - enc[1]) * k) % n
print(a)

b = (enc[0] - a * 75) % n
print(b)

assert (a * 75 + b) % n == enc[0]

def de_affine(flag: str, k: list) -> str:

    txt = ""
    d = lambda x: (pow(k[0], -1, n) * (x - k[1])) % n
    for x in flag:
        txt += chr(d(x))
    return txt

print(de_affine(enc, [a, b]))